apply plugin: 'maven-publish'
apply plugin: 'signing'

def PUBLISH_GROUP_ID = POM_GROUP //
def PUBLISH_ARTIFACT_ID = POM_ARTIFACT_ID           //项目名
def PUBLISH_VERSION = VERSION_CODE         //版本号


println("PUBLISH_GROUP_ID${PUBLISH_GROUP_ID}")


def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://s01.oss.sonatype.org/content/repositories/snapshots/"
}
def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

def configurePom(pom) {
    pom.name = POM_NAME
    pom.packaging = POM_PACKAGING
    pom.description = POM_DESCRIPTION
    pom.url = POM_URL

    pom.scm {
        url = POM_SCM_URL
        connection = POM_SCM_CONNECTION
        developerConnection = POM_SCM_DEV_CONNECTION
    }

    pom.licenses {
        license {
            name = POM_LICENCE_NAME
            url = POM_LICENCE_URL
            distribution = POM_LICENCE_DIST
        }
    }

    pom.developers {
        developer {
            id = POM_DEVELOPER_ID
            name = POM_DEVELOPER_NAME
        }
    }
}



task renameExtractAar(dependsOn: 'assembleRelease', type: Copy) {
    outputs.upToDateWhen { false }
    println(project.buildDir.getAbsolutePath())
    File processAarFile = new File(project.buildDir, "outputs/aar/lib-trojan-jni-release.aar")
    File workDir = new File(project.buildDir, "outputs/aar/workDir")

    //解压到指定的文件夹下
    from zipTree(processAarFile)
    into workDir

    doFirst {
        if (workDir.exists()) {
            workDir.deleteDir()
        }
    }

    doLast {
        //将classes.jar重命名并移动到libs目录下
        File classesJar = new File(workDir, "classes.jar")
        println(classesJar.exists())
        File renameJar = new File(workDir, "libs/classes.jar")

        classesJar.renameTo(renameJar)
        File[] files = workDir.listFiles()
//        for (i in 0..<files.length) {
//            File f = files[i]
//            println("files[i]+${f.name}")
////                if(f.name.equalsIgnoreCase("jni")||f.name.contains("Manifest")){
//            if (f.name.equalsIgnoreCase("jni")) {
//                println("files[i]+${f.name} skip")
//            } else {
//                f.delete()
//            }
//
//            if (f.name.equalsIgnoreCase("META-INF")) {
//                println("files[i]+${f.name}  deectt = ${f.delete()}")
//            }
//        }

    }
}

task copyReport3(dependsOn: renameExtractAar,type: Copy) {
//    task copyReport3(type: Copy) {

//    doFirst {
//        File workDir = new File(project.buildDir, "outputs/aar/workDir")
//        File[] files = workDir.listFiles()
//        for (i in 0..<files.length) {
//            File f = files[i]
//            if (f.name.equalsIgnoreCase("META-INF")) {
//                println("files[i]+${f.name}  deectt = ${f.delete()}")
//            }
//        }
//    }
//
//    from "$buildDir/outputs/aar/AndroidManifest.xml"
//    into "$buildDir/outputs/aar/workDir"
}

task outAar(dependsOn: copyReport3,type: Zip) {
    outputs.upToDateWhen { false }

    //aar输出路径
    File aarDir = new File(project.buildDir, "outputs/aar")

    //aar源文件夹
    File workDir = new File(aarDir, "workDir")
//        File md = new File(project.buildDir, "outputs/aar/AndroidManifest.xml")
    from workDir

    //重命名AAR
    //archiveVersion 10
    archiveName "${POM_ARTIFACT_ID}-${VERSION_CODE}.aar"
    destinationDir aarDir
}

publishing {
    publications {

        release(MavenPublication) {
            groupId PUBLISH_GROUP_ID
            version PUBLISH_VERSION
            artifactId PUBLISH_ARTIFACT_ID
//            artifact("$buildDir/outputs/aar/${POM_ARTIFACT_ID}-${VERSION_CODE}.aar")
            artifact("$buildDir/outputs/aar/lib-trojan-jni-release.aar")
            configurePom(pom)
        }

    }

    repositories {
        maven {
            def releasesRepoUrl = getReleaseRepositoryUrl()
            def snapshotsRepoUrl = getSnapshotRepositoryUrl()
            url = isReleaseBuild() ? releasesRepoUrl : snapshotsRepoUrl
            credentials(PasswordCredentials) {
                username = getRepositoryUsername()
                password = getRepositoryPassword()
            }
        }
    }



}

signing {
    publishing.publications.all { publication ->
        sign publication
    }
}

task uploadMYVVVV(){

}

